# https://www.runoob.com/docker/centos-docker-install.html docker 的安装和使用
# https://docs.docker.com/compose/gettingstarted/ compose的安装与使用
# 换源加速上述安装过程 sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
# https://ecs.console.aliyun.com/#/server/region/cn-hangzhou 阿里云ECS服务器
# 更换阿里云镜像源 vi /etc/docker/daemon.json 加入 {"registry-mirros": ["https://pee6w651.mirror.aliyuncs.com"]}后重启服务service docker restart
# https://www.cnblogs.com/sparkdev/p/9826520.html 配置使用环境变量
# https://github.com/jpetazzo/nsenter docker-enter命令
# https://www.shellhacks.com/docker-enter-container/ 进入docker容器
# https://www.jianshu.com/p/bf802ea2d7cf 

# 首先执行 sudo docker-compose build 构建不基于3rd镜像的web服务的镜像
# 然后执行 sudo docker-compose up  不加服务名会启动所有的服务。首次起服务时，会拉取基于3rd镜像的服务所需的镜像。
version: '3.1'  #"登录容器请执行:rabbitmq-plugins enable rabbitmq_management 才可>使用WEB管理页面"
services:

  # https://www.jenkins.io/zh/doc/book/installing/#%E5%9C%A8docker%E4%B8%AD%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%BF%90%E8%A1%8Cjenkins
  jenkins:
    image: jenkinsci/blueocean
    ports:
     - 8080:8080
     - 5050:5050
    volumes:
     - ./jenkins/data:/var/jenkins_home
     - ./jenkins/docker.sock:/var/run/docker.sock
    restart: always
    user: root
    environment:
      JAVA_OPTS: '-Djava.util.logging.config.file=/var/jenkins_home/log.properties'
      TZ: Asia/Shanghai

  # docker-enter ${container_id}
  # redis-cli 
  redis:
    # 指定镜像
    image: redis:4
    ports:
      # 端口映射
      - 6379:6379
    volumes:
      # 目录映射
      - ./redis/conf:/usr/local/etc/redis
      - ./redis/data:/data
    
    environment:
      TZ: Asia/Shanghai
    command:
      # 执行的命令
      redis-server --requirepass ${redis_pwd}
    restart: always
  

  # docker exec -it ${rabbit_container_id} /bin/bash 不需要进入容器赋予用户权限
  # rabbitmqctl  set_permissions -p ciwei root '.*' '.*' '.*'
  rmq:
    image: rabbitmq:3.6.10-management
    expose:
      - "15672"
    ports:
      - "4369:4369"
      - "5671:5671"
      - "5672:5672"
      - "15672:15672"
      - "25672:25672"
    environment:
      RABBITMQ_DEFAULT_VHOST: ${rmq_vhost}
      RABBITMQ_DEFAULT_USER: ${rmq_user}
      RABBITMQ_DEFAULT_PASS: ${rmq_pwd}
      RABBITMQ_LOGS: /var/lib/rabbitmq/rabbitmq.log
      RABBITMQ_SASL_LOGS: /var/lib/rabbitmq/rabbitmq-sasl.log
      RABBITMQ_ERLANG_COOKIE: ${rmq_erlang_ck} 
      TZ: Asia/Shanghai
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    restart: always


# https://www.elastic.co/guide/en/elasticsearch/reference/6.4/docker.html#docker es官方docker配置的说明 
  es:
    image: elasticsearch:7.6.2
    expose:
      - "9200"
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      TZ: Asia/Shanghai
    volumes:
      - ./es/data:/usr/share/elasticsearch/data
      - ./es/logs:/usr/share/elasticsearch/logs
    ports:
      - "9200:9200"
    restart: always
 
  # https://www.cnblogs.com/han-1034683568/p/6941337.html 配置 构建文件，自动执行SQL建库脚本
  # https://www.cnblogs.com/bolingcavalry/p/11495509.html 根据MYSQL镜像的entry文件，配置映射文件
  # https://github.com/docker-library/mysql/blob/7397711170daed7ebba3bf373af143e5179906fc/5.7/Dockerfile 
  # https://github.com/docker-library/mysql/blob/7397711170daed7ebba3bf373af143e5179906fc/5.7/docker-entrypoint.sh 
  # ALTER TABLE `goods` drop column `target_price` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '发布者实际的手机号';
  # ALTER TABLE `goods` drop column `target_price`;
  db:
    image: mysql:5.7
    expose:
      - "33060"
    ports:
      - "33060:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d/
    environment:
      MYSQL_DATABASE: ${mysql_db}
      MYSQL_ROOT_PASSWORD: ${mysql_root_pwd}
      TZ: Asia/Shanghai
    restart: always
  
  # https://blog.csdn.net/bocai_xiaodaidai/article/details/92641534 多服务启动脚本
  web:
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "9888"
    ports:
      - "9888:8889"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./ciwei:/code
    command:
      uwsgi --ini /code/uwsgi_docker.ini
      # celery -A application.celery worker -Q log_queue,sync_queue,recommend_queue,subscribe_queue,sms_queue,mall_queue -l info &
      # celery -A application.celery beat -l info
    depends_on:
      - db
      - es
      - redis
      - rmq
    links:
      - db
      - es
      - redis
      - rmq
    restart: always